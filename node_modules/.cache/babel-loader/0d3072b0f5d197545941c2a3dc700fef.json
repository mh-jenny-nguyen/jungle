{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:/xampp/htdocs/keta-blog/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _inherits = require(\"C:/xampp/htdocs/keta-blog/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:/xampp/htdocs/keta-blog/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _wrapNativeSuper = require(\"C:/xampp/htdocs/keta-blog/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapNativeSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = validateTimestamp;\nexports.ValidationError = void 0;\n\nvar ValidationError = /*#__PURE__*/function (_Error) {\n  _inherits(ValidationError, _Error);\n\n  var _super = _createSuper(ValidationError);\n\n  function ValidationError(name, message) {\n    var _this;\n\n    _classCallCheck(this, ValidationError);\n\n    _this = _super.call(this, \"Invalid \\\"\".concat(name, \"\\\" provided, \") + message);\n    _this.name = 'ValidationError';\n    return _this;\n  }\n\n  return ValidationError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nexports.ValidationError = ValidationError;\n\nfunction validateTimestamp(name, timestamp, options) {\n  options = options || {};\n\n  if (typeof timestamp !== 'number') {\n    throw new ValidationError(name, \"only numeric values are allowed for timestamps, provided type was \\\"\".concat(typeof timestamp, \"\\\"\"));\n  }\n\n  if (options.maximum && timestamp > options.maximum) {\n    throw new ValidationError(name, \"value (\".concat(timestamp, \") cannot be further in the future than expected maximum (\").concat(options.maximum, \")\"));\n  }\n\n  if (options.now && timestamp < options.now) {\n    throw new ValidationError(name, \"value (\".concat(timestamp, \") cannot be in the past, current time was \").concat(options.now));\n  }\n}","map":{"version":3,"sources":["C:/xampp/htdocs/keta-blog/node_modules/contentful/dist/es-modules/utils/validate-timestamp.js"],"names":["Object","defineProperty","exports","value","default","validateTimestamp","ValidationError","name","message","concat","Error","timestamp","options","maximum","now"],"mappings":"AAAA;;;;;;;;;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,iBAAlB;AACAH,OAAO,CAACI,eAAR,GAA0B,KAAK,CAA/B;;IAEMA,e;;;;;AACJ,2BAAYC,IAAZ,EAAkBC,OAAlB,EAA2B;AAAA;;AAAA;;AACzB,8BAAM,aAAaC,MAAb,CAAoBF,IAApB,EAA0B,eAA1B,IAA6CC,OAAnD;AACA,UAAKD,IAAL,GAAY,iBAAZ;AAFyB;AAG1B;;;iCAJ2BG,K;;AAQ9BR,OAAO,CAACI,eAAR,GAA0BA,eAA1B;;AAEA,SAASD,iBAAT,CAA2BE,IAA3B,EAAiCI,SAAjC,EAA4CC,OAA5C,EAAqD;AACnDA,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;;AAEA,MAAI,OAAOD,SAAP,KAAqB,QAAzB,EAAmC;AACjC,UAAM,IAAIL,eAAJ,CAAoBC,IAApB,EAA0B,uEAAuEE,MAAvE,CAA8E,OAAOE,SAArF,EAAgG,IAAhG,CAA1B,CAAN;AACD;;AAED,MAAIC,OAAO,CAACC,OAAR,IAAmBF,SAAS,GAAGC,OAAO,CAACC,OAA3C,EAAoD;AAClD,UAAM,IAAIP,eAAJ,CAAoBC,IAApB,EAA0B,UAAUE,MAAV,CAAiBE,SAAjB,EAA4B,2DAA5B,EAAyFF,MAAzF,CAAgGG,OAAO,CAACC,OAAxG,EAAiH,GAAjH,CAA1B,CAAN;AACD;;AAED,MAAID,OAAO,CAACE,GAAR,IAAeH,SAAS,GAAGC,OAAO,CAACE,GAAvC,EAA4C;AAC1C,UAAM,IAAIR,eAAJ,CAAoBC,IAApB,EAA0B,UAAUE,MAAV,CAAiBE,SAAjB,EAA4B,4CAA5B,EAA0EF,MAA1E,CAAiFG,OAAO,CAACE,GAAzF,CAA1B,CAAN;AACD;AACF","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = validateTimestamp;\nexports.ValidationError = void 0;\n\nclass ValidationError extends Error {\n  constructor(name, message) {\n    super(\"Invalid \\\"\".concat(name, \"\\\" provided, \") + message);\n    this.name = 'ValidationError';\n  }\n\n}\n\nexports.ValidationError = ValidationError;\n\nfunction validateTimestamp(name, timestamp, options) {\n  options = options || {};\n\n  if (typeof timestamp !== 'number') {\n    throw new ValidationError(name, \"only numeric values are allowed for timestamps, provided type was \\\"\".concat(typeof timestamp, \"\\\"\"));\n  }\n\n  if (options.maximum && timestamp > options.maximum) {\n    throw new ValidationError(name, \"value (\".concat(timestamp, \") cannot be further in the future than expected maximum (\").concat(options.maximum, \")\"));\n  }\n\n  if (options.now && timestamp < options.now) {\n    throw new ValidationError(name, \"value (\".concat(timestamp, \") cannot be in the past, current time was \").concat(options.now));\n  }\n}"]},"metadata":{},"sourceType":"script"}