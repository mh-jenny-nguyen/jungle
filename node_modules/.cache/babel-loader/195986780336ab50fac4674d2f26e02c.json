{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\keta-blog\\\\src\\\\context.js\";\nimport React, { Component } from 'react';\nimport Client from './contentful';\nimport { documentToHtmlString } from '@contentful/rich-text-html-renderer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PostContext = /*#__PURE__*/React.createContext();\n\nclass PostProvider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      posts: [],\n      filterPosts: [],\n      currentPosts: [],\n      loading: true,\n      featuredPost: [],\n      portfolio: [],\n      currentPage: 1,\n      previousPage: 1,\n      nextPage: 2,\n      numberPerPage: 8,\n      totalOfPost: 0,\n      totalOfPage: 0,\n      keyword: ''\n    };\n\n    this.getData = async () => {\n      try {\n        let response = await Client.getEntries({\n          content_type: \"post\",\n          order: \"fields.dateUpdated\"\n        });\n        let posts = this.formatData(response.items);\n        let featuredPost = posts.filter(post => post.featured === true);\n        let currentPosts = this.getPostByPage(this.state.currentPage, posts);\n        this.setState({\n          posts: posts,\n          loading: false,\n          featuredPost: featuredPost,\n          TotalOfPost: posts.length,\n          currentPosts: currentPosts,\n          totalOfPage: Math.ceil(posts.length / this.state.numberPerPage)\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    this.getPostByPage = (page = 1, posts = '') => {\n      let startIndex = 0;\n      let endIndex = this.state.numberPerPage;\n      posts = posts.length > 0 ? posts : this.state.posts;\n\n      if (page > 1) {\n        startIndex = (page - 1) * this.state.numberPerPage;\n        endIndex = this.state.numberPerPage * page - 1;\n      }\n\n      let tempPosts = posts.slice(startIndex, endIndex);\n      return tempPosts;\n    };\n\n    this.handleLoadPage = (page = 1) => {\n      debugger;\n      let currentPosts = this.getPostByPage(page);\n      this.setState({\n        currentPage: page,\n        currentPosts: currentPosts,\n        previousPage: page > 1 ? page - 1 : page,\n        nextPage: page < this.state.totalOfPost ? page + 1 : this.state.totalOfPost\n      });\n    };\n\n    this.formatData = items => {\n      let tempItems = items.map(item => {\n        let id = item.sys.id;\n        let image = item.fields.image.fields.file.url;\n        let author = {\n          name: item.fields.author.fields.name,\n          description: item.fields.author.fields.description,\n          avatar: item.fields.author.fields.avatar.fields.file.url,\n          url: item.fields.author.fields.url\n        };\n        let dateCreated = this.formatDate(item.fields.dateCreated);\n        let dateUpdated = this.formatDate(item.fields.dateUpdated);\n        let post = { ...item.fields,\n          id,\n          image,\n          author,\n          dateCreated,\n          dateUpdated\n        };\n        return post;\n      });\n      return tempItems;\n    };\n\n    this.getPost = slug => {\n      const post = this.state.posts.find(post => {\n        return post.slug === slug;\n      });\n      return post;\n    };\n\n    this.formatDate = date => {\n      const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n      let tempDate = new Date(date);\n      let string = monthNames[tempDate.getMonth()] + ' ' + (\"0\" + tempDate.getDate()).slice(-2) + ', ' + tempDate.getFullYear();\n      return string;\n    };\n\n    this.filterPostByKeyWord = keyword => {\n      let filterPosts = [];\n      this.state.posts.forEach(post => {\n        let flag = false;\n        keyword = keyword.toLowerCase();\n\n        if (post.title.toLowerCase().includes(keyword) || post.summary.toLowerCase().includes(keyword)) {\n          flag = true;\n        } else {\n          let content = documentToHtmlString(post.content);\n\n          if (content.toLowerCase().includes(keyword)) {\n            flag = true;\n          }\n        }\n\n        if (flag) {\n          filterPosts.push(post);\n        }\n      });\n      this.setState({\n        keyword: keyword,\n        filterPosts: filterPosts\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.getData();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(PostContext.Provider, {\n      value: { ...this.state,\n        getPost: this.getPost,\n        handleLoadPage: this.handleLoadPage,\n        getPostByPage: this.getPostByPage,\n        filterPostByKeyWord: this.filterPostByKeyWord\n      },\n      children: this.props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nconst PostConsumer = PostContext.Consumer;\nexport function withPostConsumer(Component) {\n  return function consumerWrapper(props) {\n    return /*#__PURE__*/_jsxDEV(PostConsumer, {\n      children: value => /*#__PURE__*/_jsxDEV(Component, { ...props,\n        context: value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 14\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 10\n    }, this);\n  };\n}\nexport { PostProvider, PostConsumer, PostContext };","map":{"version":3,"sources":["C:/xampp/htdocs/keta-blog/src/context.js"],"names":["React","Component","Client","documentToHtmlString","PostContext","createContext","PostProvider","state","posts","filterPosts","currentPosts","loading","featuredPost","portfolio","currentPage","previousPage","nextPage","numberPerPage","totalOfPost","totalOfPage","keyword","getData","response","getEntries","content_type","order","formatData","items","filter","post","featured","getPostByPage","setState","TotalOfPost","length","Math","ceil","error","console","log","page","startIndex","endIndex","tempPosts","slice","handleLoadPage","tempItems","map","item","id","sys","image","fields","file","url","author","name","description","avatar","dateCreated","formatDate","dateUpdated","getPost","slug","find","date","monthNames","tempDate","Date","string","getMonth","getDate","getFullYear","filterPostByKeyWord","forEach","flag","toLowerCase","title","includes","summary","content","push","componentDidMount","render","props","children","PostConsumer","Consumer","withPostConsumer","consumerWrapper","value"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport Client from './contentful';\r\nimport { documentToHtmlString } from '@contentful/rich-text-html-renderer';\r\n\r\nconst PostContext = React.createContext();\r\n\r\nclass PostProvider extends Component {\r\n\tstate = {\r\n\t\tposts: [],\r\n\t\tfilterPosts: [],\r\n\t\tcurrentPosts: [],\r\n\t\tloading: true,\r\n\t\tfeaturedPost: [],\r\n\t\tportfolio: [],\r\n\t\tcurrentPage: 1,\r\n\t\tpreviousPage: 1,\r\n\t\tnextPage: 2,\r\n\t\tnumberPerPage: 8,\r\n\t\ttotalOfPost: 0,\r\n\t\ttotalOfPage: 0,\r\n\t\tkeyword: '',\r\n\t}\r\n\r\n\tgetData = async () => {\r\n\t\ttry{\r\n\t\t\tlet response = await Client.getEntries({\r\n\t\t\t\tcontent_type: \"post\",\r\n\t\t\t\torder: \"fields.dateUpdated\"\r\n\t\t\t});\r\n\r\n\t\t\tlet posts = this.formatData(response.items);\r\n\t\t\tlet featuredPost = posts.filter(post => post.featured === true);\r\n\t\t\tlet currentPosts = this.getPostByPage(this.state.currentPage, posts);\r\n\r\n\t\t\tthis.setState({\r\n\t\t\t\tposts: posts,\r\n\t\t\t\tloading: false,\r\n\t\t\t\tfeaturedPost: featuredPost,\r\n\t\t\t\tTotalOfPost: posts.length,\r\n\t\t\t\tcurrentPosts: currentPosts,\r\n\t\t\t\ttotalOfPage: Math.ceil(posts.length / this.state.numberPerPage)\r\n\r\n\t\t\t});\r\n\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log(error);\r\n\t\t}\r\n\t}\r\n\r\n\tgetPostByPage = (page = 1, posts = '') => {\r\n\t\tlet startIndex = 0;\r\n\t\tlet endIndex = this.state.numberPerPage;\r\n\t\tposts = (posts.length > 0 ? posts : this.state.posts);\r\n\r\n\t\tif(page > 1) {\r\n\t\t\tstartIndex = (page - 1) * this.state.numberPerPage;\r\n\t\t\tendIndex = (this.state.numberPerPage * page) - 1;\r\n\t\t}\r\n\t\t\r\n\t\tlet tempPosts = posts.slice(startIndex, endIndex);\r\n\r\n\t\treturn tempPosts;\r\n\t}\r\n\r\n\thandleLoadPage =  (page = 1) => {\r\n\t\tdebugger;\r\n\t\tlet currentPosts = this.getPostByPage(page);\r\n\r\n\t\tthis.setState({\r\n\t\t\tcurrentPage: page,\r\n\t\t\tcurrentPosts: currentPosts,\r\n\t\t\tpreviousPage: (page > 1 ? page - 1 : page ),\r\n\t\t\tnextPage: (page < this.state.totalOfPost ? page + 1 : this.state.totalOfPost),\r\n\t\t});\r\n \t}\r\n\r\n\tcomponentDidMount () {\r\n\t\tthis.getData();\r\n\t}\r\n\r\n\tformatData =  (items) => {\r\n\t\tlet tempItems = items.map(item => {\r\n\r\n\t\t\tlet id = item.sys.id\r\n\t\t\tlet image = item.fields.image.fields.file.url;\r\n\t\t\tlet author = {\r\n\t\t\t\tname: item.fields.author.fields.name,\r\n\t\t\t\tdescription: item.fields.author.fields.description,\r\n\t\t\t\tavatar: item.fields.author.fields.avatar.fields.file.url,\r\n\t\t\t\turl: item.fields.author.fields.url,\r\n\t\t\t}\r\n\r\n\t\t\tlet dateCreated = this.formatDate(item.fields.dateCreated);\r\n\t\t\tlet dateUpdated = this.formatDate(item.fields.dateUpdated);\r\n\r\n\t\t\tlet post = {...item.fields, id, image, author, dateCreated, dateUpdated};\r\n\r\n\t\t\treturn post;\r\n\t\t});\r\n\r\n\t\treturn tempItems;\r\n\t}\r\n\r\n\tgetPost = (slug) => {\r\n\t\tconst post = this.state.posts.find( post => {\r\n\t\t\treturn post.slug === slug;\r\n\t\t});\r\n\r\n\t\treturn post;\r\n\t}\r\n\r\n\tformatDate = (date) => {\r\n\t\tconst monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n\t\t  \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\r\n\t\t];\r\n\t\tlet tempDate = new Date(date);\r\n\t\tlet string = monthNames[tempDate.getMonth()] + ' ' + (\"0\" + tempDate.getDate()).slice(-2) + ', ' + tempDate.getFullYear();\r\n\t\t\r\n\t\treturn string;\r\n\t} \r\n\r\n\tfilterPostByKeyWord = (keyword) => {\r\n\t\tlet filterPosts = [];\r\n\r\n\t\tthis.state.posts.forEach( post => {\r\n\t\t\tlet flag = false;\r\n\t\t\tkeyword = keyword.toLowerCase();\r\n\r\n\t\t\tif (post.title.toLowerCase().includes(keyword) || post.summary.toLowerCase().includes(keyword)) {\r\n\t\t\t\tflag = true\r\n\t\t\t} else {\r\n\t\t\t\tlet content = documentToHtmlString(post.content);\r\n\r\n\t\t\t\tif(content.toLowerCase().includes(keyword)) {\r\n\t\t\t\t\tflag = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif(flag) {\r\n\t\t\t\tfilterPosts.push(post);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.setState({\r\n\t\t\tkeyword: keyword,\r\n\t\t\tfilterPosts: filterPosts\r\n\t\t});\r\n\t}\r\n \r\n\trender() {\r\n\t\treturn(\r\n\t\t\t<PostContext.Provider value={{ ...this.state, getPost: this.getPost, handleLoadPage: this.handleLoadPage, getPostByPage: this.getPostByPage, filterPostByKeyWord: this.filterPostByKeyWord }}>\r\n\t\t\t\t{this.props.children}\r\n\t\t\t</PostContext.Provider>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nconst PostConsumer = PostContext.Consumer;\r\n\r\nexport function withPostConsumer(Component) {\r\n\treturn function consumerWrapper(props) {\r\n\t\treturn <PostConsumer>\r\n\t\t\t{value => <Component {...props} context={value} /> }\r\n\t\t</PostConsumer>\r\n\t}\r\n}\r\n\r\nexport {PostProvider, PostConsumer, PostContext}"]},"metadata":{},"sourceType":"module"}